(function ($) {
'use strict';

$ = 'default' in $ ? $['default'] : $;

var getLocn = function() {
    return $.getJSON('http://ip-api.com/json')
        .then(function(data) {
            return {
                lat: data.lat,
                lng: data.lon
            };
        });
}

var mashapeKey = 'D38nBJDMDDmshtvEpJRaWzd5nQkap1RbPomjsn55ttulUTrvTh';

var getWeatherData = function(_lat, _lng) {
    return $.ajax({
        type: 'get',
        dataType: 'json',
        beforeSend: function(request) {
            request.setRequestHeader('X-Mashape-Key', mashapeKey);
        },
        url: 'https://simple-weather.p.mashape.com/weatherdata',
        data: {
            lat: _lat,
            lng: _lng
        }
    })
}

function EventEmitter() {
    var callbacks = {};

    this.on = function( event, cb ) {
        if ( !callbacks[event] ) callbacks[event] = [];

        callbacks[event].push( cb );
    }

    this.trigger = function( event, data ) {

        if ( !callbacks[event] ) return;

        callbacks[event].forEach(function( callback ) {
            callback.call(this, data)
        });
    }
}

var EventEmitterMixin = function( proto ) {
    return EventEmitter.call( proto );
}

/* eslint-disable */
if (typeof Object.assign != 'function') {
  (function () {
    Object.assign = function (target) {
      'use strict';
      // We must check against these specific cases.
      if (target === undefined || target === null) {
        throw new TypeError('Cannot convert undefined or null to object');
      }

      var output = Object(target);
      for (var index = 1; index < arguments.length; index++) {
        var source = arguments[index];
        if (source !== undefined && source !== null) {
          for (var nextKey in source) {
            if (source.hasOwnProperty(nextKey)) {
              output[nextKey] = source[nextKey];
            }
          }
        }
      }
      return output;
    };
  })();
}
/* eslint-enable */

function copy( obj ) {
    return Object.assign( {}, obj );
}

var WeatherModel = function() {
    var store = {};

    this.set = function( obj ) {
        Object.keys( obj ).forEach(function( key ) {
            store[key] = obj[key];
        })

        this.trigger( 'update', copy( store ) );
    }

    this.get = function( key ) {
        return store[ key ];
    }
};

EventEmitterMixin(WeatherModel.prototype);

var forcastView = function(data) {
    var _toggle = data.format === 'celsius' ? 'fahrenheit' : 'celsius';

    return '<p>' + data.desc + '</p>' +
           '<p>temp: <span id="js-temp">' + data.temp + '</span></p>' +
           '<button id="js-temp-toggle">show in ' + _toggle + '</button>';
}

var loadingView = function() {
    return '<p>Loading, Please wait...</p>';
}

/**
 * function to return value at give path
 *
 * @function get
 * @param {Object} obj - the object to search through
 * @param {Array} pathArr - the path to the property
 * @return {*} deaults of undefined
 **/
/* eslint-disable no-nested-ternary */
function get(obj, pathArr) {
    return !obj ? void 0 :
        pathArr.length === 1 ? obj[pathArr[0]] :
        get(obj[pathArr[0]], pathArr.slice(1));
}
/* eslint-enable no-nested-ternary */

/**
 * Convert Celsius to Fahrenheit and visa versa
 *
 * @function tempConvert
 * @param {Object} temp - info about the temp to be converted
 * @param {Number} temp.temp - the actual temperature
 * @param {String} temp.format - the format
 * @return {Object|undefined} the converted object or undefined
 **/
/* eslint-disable no-nested-ternary */
function tempConvert(temp) {
    return temp.format === 'celsius' ? {format: 'fahrenheit', temp: (temp.temp * 9 / 5) + 32 } :
        temp.format === 'fahrenheit' ? {format: 'celsius', temp: (temp.temp - 32) * 5 / 9} :
        void 0;
}
/* eslint-enable no-nested-ternary */

/**
 * genterate a function  to render a template into the DOM
 *
 * @function templateRenderer
 * @param {String} selector - CSS selector for where the template is to be injected
 * @param {Function} viewFunc - a function returns HMTL
 * @return {Function} a function that takes a data obect as a param
**/
function templateRenderer( selector, viewFunc ) {
    return function( data ) {
        return $( selector ).html( viewFunc( data ) );
    }
}

var renderForcast = templateRenderer( '#forcast', forcastView );
// render loading message
templateRenderer( '#forcast', loadingView )();

var weatherModel = new WeatherModel();

weatherModel.on( 'update', renderForcast );

// get the location
getLocn()
    // then get the weather data
    .then(function(latLng) {
        return getWeatherData(latLng.lat, latLng.lng);
    })
    // do something useful with the data
    .then(function(data) {

        weatherModel.set({
            desc: get(data, ['query', 'results', 'channel', 'item', 'condition', 'text']),
            temp: get(data, ['query', 'results', 'channel', 'item', 'condition', 'temp']),
            format: 'celsius'
        });

        $(document).on('click', '#js-temp-toggle', function() {
            weatherModel.set(tempConvert({
                temp: weatherModel.get( 'temp' ),
                format: weatherModel.get( 'format')
            }));
        });

    });

}(jQuery));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
